env: dev                             #Name of the environment, e.g. dev, staging or production.
domain_name:                 #Domain on which the portal will be accessed. e.g. staging.{implementation-name}.org
proto: https                       # Protocol

sunbird_domain_name:  #Sunbirded domain name

ekstep_s3_env: qa                       # dev or qa of ekstep for plugins
learningservice_ip:                    # Load balancer IP for learning server
keycloak_url:                        # KSunbirdED eycloak Load balancer IP; eg http://10.10.10.10


# Sunbird Application name and framework name
sunbird_default_channel:                # Organization channel name which portal will connect to
sunbird_app_name:                       # By default app name will be sunbird

#### artifact upload
artifacts_container: 'artifacts'                 # blob container name to save built artifacts


#sunbird_cassandra_replication_strategy: '{"class":"NetworkTopologyStrategy","datacenter1":2}' # If using cluster give this value and choose datacenter and replication factor as required '{"class":"NetworkTopologyStrategy","datacenter1":2}' if not using cluster give this value '{"class":"SimpleStrategy","replication_factor":1}'

#####################################################################################################
monitor_alerts_mail_from_email:        # From Address for alert mails
sunbird_msg_sender: 
sunbird_android_app_url: ""             # Playstore url of android app; default is subird.org

plugin_container_name: 

keycloak_auth_server_url: "https://{{sunbird_domain_name}}/auth"

kong_postgres_host: "{{ dock_postgres_host }}"
sunbird_instance: dock 
sunbird_telemetry_kafka_topic: sunbirddock.telemetry.ingestion
sunbird_data_pipeline_kafka_topic: sunbirddock.telemetry.ingest
sunbird_url_shortner_enable: true
sunbird_qrimage_topic: sunbirddock.qrimage.request
sunbird_linked_content_base_url: "{{ proto }}://{{ domain_name }}/play/content/"

kong_all_consumer_groups:
  - announcementAccess
  - appAccess
  - appAdmin
  - appUpdate
  - badgeAccess
  - badgeAdmin
  - badgeCreate
  - badgeUpdate
  - certificateAccess
  - certificateAdmin
  - certificateCreate
  - certificateUpdate
  - channelAccess
  - channelCreate
  - channelUpdate
  - contentAccess
  - contentAdmin
  - contentCreate
  - contentUpdate
  - courseAccess
  - courseAdmin
  - courseCreate
  - courseUpdate
  - deviceCreate
  - dialcodeAccess
  - dialcodeAdmin
  - dialcodeCreate
  - dialcodeUpdate
  - frameworkAccess
  - locationAccess
  - nominationAccess
  - nominationAdmin
  - nominationCreate
  - nominationUpdate
  - noteAccess
  - noteAdmin
  - noteCreate
  - noteUpdate
  - objectAccess
  - orgAccess
  - orgCreate
  - pageAccess
  - pluginAccess
  - preferenceAccess
  - preferenceCreate
  - preferenceUpdate
  - programAccess
  - programAdmin
  - programCreate
  - programTenantList
  - programUpdate
  - registryAccess
  - registryAdmin
  - registryCreate
  - registryUpdate
  - reportsAccess
  - reportsAdmin
  - reportsCreate
  - reportsUpdate
  - ssoCreate
  - userAccess
  - userAdmin
  - userCreate
  - userTempAdmin
  - userUpdate
  - refreshTokenCreate
  - anonymousContentAccess
  - anonymousUserCreate
  - anonymousUserAccess
  - anonymousAppAccess
  

# Consumers to be on-boarded
kong_consumers:
  - username: api-management-test-user
    groups: "{{ kong_all_consumer_groups }}"
    print_credentials: true
    state: present
    rate_limits: "{{ premium_consumer_rate_limits }}"
  - username: api-management-test-user
    groups: "{{ kong_all_consumer_groups }}"
    print_credentials: true
    state: present
    rate_limits: "{{ premium_consumer_rate_limits }}"

kong_postgres_database: 

sunbird_dial_repo_api_base_url: "https://qa.ekstep.in/api"

## keycloak 
keycloak_postgres_database: keycloak_3017  # keycloak version 7, the migration will append 7 to the existing KC3 DB in the name - EXISTING_KC3_DB_NAME7
## player
#desktop_app_storage_url: "https://sunbirdofflineinstaller.blob.core.windows.net/dev-offlineinstaller"
environment_id: 10000000
graph_passport_key: "{{core_vault_graph_passport_key}}"

## KP configuration ##
azure_public_container: 
cassandra_keyspace_prefix: dock


#Kubernetes variables
namespace: dock
imagepullsecrets: 
dockerhub: 
kubeconfig_path: 
sunbird_portal_player_cdn_enabled: false
private_ingressgateway_ip:
nginx_public_ingress_ip: 
storage_class_name: "managed-premium"
keycloak_lb_ip: 
cloud_storage_url: 
sunbird_lms_base_url: "http://{{private_ingressgateway_ip}}/api"   ### keycloak env variable
private_ingress_custom_annotations: true

sunbird_sso_client_id: "lms"
apimanager_liveness_readiness:
  healthcheck: false



######### dock variables #########
schemas_container_name: content-service
kp_schema_base_path: 
player_repository: creation-player
dock_api_auth_token: "{{ core_vault_dock_api_auth_token }}"
sunbird_learner_player_url: 
sunbird_program_base_url: 
enc_n_keys: 50 # Total number of keys required for encryption
enc_n_reserved_keys: 15 # Number of keys which app reserves for usage
sunbird_kp_content_service_base_url: http://content-service:9000/
sunbird_kp_assessment_service_base_url: http://assessment-service:9000/
sunbird_kp_learning_service_base_url: http://{{ learningservice_ip }}:8080/learning-service/
dock_base_url: "https://{{domain_name}}"
dock_channel: 

core_vault_postgres_username: 
dock_postgres_host: 
dock_postgres_user: "{{ core_vault_dock_postgres_user }}"
dock_postgres_password: "{{ core_vault_dock_postgres_password }}"

programs_service_postgres_host: "{{ dock_postgres_host }}"
programs_service_postgres_username: "{{ dock_postgres_user }}"
programs_service_postgres_password: "{{ dock_postgres_password }}"
programs_postgres_db: sunbird_programs
sunbird_opensaber_service_url: "http://opensaber-service:8080"
dock_api_call_log_status: false
opensaber_search_limit: 1000
opensaber_db_pool_size: 250
sunbird_portal_url: https://{{sunbird_domain_name}}/api/
sunbird_auto_creation_topic: sunbirddev.auto.creation.job.request  
sunbird_program_db_pool: 100

sunbird_opensaber_service_url: "http://opensaber-service:8080"
postgresql_users:
  - name: "{{kong_postgres_user}}"
    login_host: "{{kong_postgres_host}}"
    login_password: "{{kong_postgres_password}}"
    password: "{{kong_postgres_password}}"
    db: "{{kong_postgres_database}}"
    login_user: "{{kong_postgres_user}}"
    priv: "ALL"
  - name: "{{programs_service_postgres_username}}"
    login_host: "{{programs_service_postgres_host}}"
    login_password: "{{programs_service_postgres_password}}"
    password: "{{ programs_service_postgres_password }}" # encrypted password
    db: "{{programs_postgres_db}}"
    login_user: "{{programs_service_postgres_username}}"
    priv: "ALL"
  - name: "{{ enc_postgres_user }}"
    login_host: "{{ enc_postgres_host }}"
    login_password: "{{ enc_postgres_password }}"
    password: "{{ enc_postgres_password }}" # encrypted password
    db: "{{ enc_postgres_database }}"
    login_user: "{{ enc_postgres_user }}"
    priv: "ALL"
  - name: "{{ opensaber_postgres_username }}"
    login_host: "{{ opensaber_postgres_host }}"
    login_password: "{{ opensaber_postgres_password }}"
    password: "{{ opensaber_postgres_password }}" # encrypted password
    db: "{{ opensaber_postgres_database }}"
    login_user: "{{ opensaber_postgres_username }}"
    priv: "ALL"
  

postgresql_databases:
  - name: "{{programs_postgres_db}}"
    login_host: "{{programs_service_postgres_host}}"
    login_password: "{{programs_service_postgres_password}}"
    owner: "{{programs_service_postgres_username}}"
    login_user: "{{programs_service_postgres_username}}"
  - name: "{{ kong_postgres_database }}"
    login_host: "{{ kong_postgres_host }}"
    login_password: "{{ kong_postgres_password }}"
    owner: "{{ kong_postgres_user }}"
    login_user: "{{ kong_postgres_user }}"
  - name: "{{ enc_postgres_database }}"
    login_host: "{{ enc_postgres_host }}"
    login_password: "{{ enc_postgres_password }}"
    owner: "{{ enc_postgres_user }}"
    login_user: "{{ enc_postgres_user }}"
  - name: "{{ opensaber_postgres_database }}"
    login_host: "{{ opensaber_postgres_host }}"
    login_password: "{{ opensaber_postgres_password }}"
    owner: "{{ opensaber_postgres_username }}"
    login_user: "{{ opensaber_postgres_username }}"


sunbird_content_url:

sunbird_search_service_api_base_url: "http://{{private_ingressgateway_ip}}/search" 

sunbird_learner_url: 
portal_cloud_storage_url: "https://{{cloud_public_storage_accountname}}/content-service/"

# Postgresql Migraion 
postgresql_migration_user: "{{ core_vault_dock_postgres_user }}"
postgresql_migration_endpoint: "{{ dock_postgres_host }}"
postgresql_migration_password: "{{ core_vault_dock_postgres_password }}"

master_category_validation_enabled: no

core_private_ingressgateway_ip:  #private ingress IP of sunbirded 


# Postgres upgrade missing vars
dp_postgres_host: "{{ dock_postgres_host }}"
dp_postgres_username: "{{ core_vault_postgres_username }}"

av_kafka_topic_create: true

# CSP vars
cloud_service_provider: 

cloud_public_storage_accountname: ""
cloud_public_storage_endpoint: ""
cloud_public_storage_region: ""
cloud_public_storage_project: ""

cloud_private_storage_accountname: ""
cloud_private_storage_endpoint: ""
cloud_private_storage_region: ""
cloud_private_storage_project: ""

cloud_management_storage_accountname: ""
cloud_management_storage_endpoint: ""
cloud_management_storage_region: ""
cloud_management_storage_project: ""

cloud_artifact_storage_accountname: ""
cloud_artifact_storage_endpoint: ""
cloud_artifact_storage_region: ""
cloud_artifact_storage_project: ""

cloud_storage_publicreports_bucketname: "reports" 
cloud_storage_privatereports_bucketname: "reports"
cloud_storage_telemetry_bucketname: "telemetry-data-store"
cloud_storage_schemas_bucketname: "content-service"
cloud_storage_flink_bucketname: "flink-check-points-store"
cloud_storage_plugin_bucketname: "sunbird-content-dock"
cloud_storage_cassandrabackup_bucketname: "cassandra-backup"
cloud_storage_esbackup_bucketname: "elasticsearch-snapshots"
cloud_storage_neo4jbackup_bucketname: "neo4j-backup"
cloud_storage_redisbackup_bucketname: "redis-backup"
cloud_storage_artifacts_bucketname: "{{ artifacts_container }}"

# Uncomment the variable based on your cloud provider (as a default we have kept Azure variable uncommented)
# GCP
# cloud_storage_url: https://storage.googleapis.com
# AWS
# cloud_storage_url: "https://s3.{{ cloud_public_storage_region }}.amazonaws.com"
# Azure
#cloud_storage_url: "https://{{ cloud_public_storage_accountname }}.blob.core.windows.net"
# OCI - TODO - add to template
#cloud_storage_url: "https://objectstorage.{{ cloud_public_storage_region }}.oraclecloud.com"
cloud_storage_url: "https://{{ cloud_public_storage_namespace }}.compat.objectstorage.{{ cloud_public_storage_region }}.oraclecloud.com"

# Building block vars
cloud_storage_base_url: "{{ cloud_storage_url }}"
cloudstorage_base_path: "{{ cloud_storage_url }}"
valid_cloudstorage_base_urls: '["{{cloud_storage_url}}"]'
cloudstorage_relative_path_prefix: "CONTENT_STORAGE_BASE_PATH"
cloudstorage_replace_absolute_path: "true"
sunbird_cloud_storage_urls: "{{ cloud_storage_url }}"

# provide the s3 compatible endpoint
# for AWS
# cloud_private_storage_account_endpoint: "https://s3.{{ cloud_public_storage_region }}.amazonaws.com"
# for OCI
#cloud_private_storage_account_endpoint: "https://<oci_namespace>.compat.objectstorage.{{cloud_public_storage_region}}.oraclecloud.com"
cloud_private_storage_account_endpoint: "{{ cloud_public_storage_endpoint }}" # Leave Blank for Azure
